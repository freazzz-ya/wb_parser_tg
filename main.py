import os
import time
import requests
import logging
import datetime
from tqdm import tqdm
import pandas as pd
from geopy.geocoders import Nominatim
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from analytics import WBAnalytics
import matplotlib
matplotlib.use('Agg')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
CONFIG = {
    'CITIES': ['–ú–æ—Å–∫–≤–∞'],
    'QUERIES_FILE': 'queries.txt',
    'MAX_PAGE': 10,
    'BRANDS': ['YalowShop'],
    'SUPPLIERS': ['YalowShop'],
    'USER_AGENT': "WB-Tracker-Bot",
    'GEO_FALLBACK_DEST': 123589415,
    'REQUEST_DELAY': 1,
    'TOKEN': '7862175726:AAFM6Ctd2dOYTZV-mZG8S-WwRs_uMuzHlqI',
    'DATA_FILE': 'positions_data.csv'
}

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = datetime.timezone(datetime.timedelta(hours=3))

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_article = State()
    waiting_for_category = State()
    waiting_for_query = State()

class WBParser:
    def __init__(self):
        self.geolocator = Nominatim(user_agent=CONFIG['USER_AGENT'])
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': CONFIG['USER_AGENT']})

    def load_queries(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(CONFIG['QUERIES_FILE']):
            raise FileNotFoundError(f"–§–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ '{CONFIG['QUERIES_FILE']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with open(CONFIG['QUERIES_FILE'], 'r', encoding='utf-8') as f:
            queries = [line.strip() for line in f if line.strip()]
        
        if not queries:
            raise ValueError(f"–§–∞–π–ª '{CONFIG['QUERIES_FILE']}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        return queries

    def get_city_params(self, city):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞"""
        try:
            location = self.geolocator.geocode(city)
            if not location:
                logger.warning(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return None

            response = self.session.get(
                'https://user-geo-data.wildberries.ru/get-geo-info',
                params={
                    'latitude': location.latitude,
                    'longitude': location.longitude,
                    'address': city
                },
                timeout=10
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è geo-info –¥–ª—è {city}: {e}")
            return None

    def parse_products(self, query, dest_id):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        results = []
        
        for page in range(1, CONFIG['MAX_PAGE'] + 1):
            try:
                response = self.session.get(
                    'https://search.wb.ru/exactmatch/ru/common/v13/search',
                    params={
                        'ab_testid': 'no_action',
                        'appType': 1,
                        'curr': 'rub',
                        'dest': dest_id,
                        'hide_dtype': 13,
                        'lang': 'ru',
                        'page': page,
                        'query': query,
                        'resultset': 'catalog',
                        'sort': 'popular',
                        'spp': 30,
                        'suppressSpellcheck': 'false'
                    },
                    timeout=15
                )
                response.raise_for_status()
                products = response.json()['data']['products']
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è '{query}' (—Å—Ç—Ä. {page}): {e}")
                continue
            
            for idx, product in enumerate(products):
                if self.is_target_product(product):
                    results.append(self.process_product(product, query, page, idx))
            
            time.sleep(CONFIG['REQUEST_DELAY'])
        
        return results

    def is_target_product(self, product):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä —Ü–µ–ª–µ–≤—ã–º"""
        brand = product.get('brand', '').strip().lower()
        supplier = product.get('supplier', '').strip()
        return brand in CONFIG['BRANDS'] or supplier in CONFIG['SUPPLIERS']

    def process_product(self, product, query, page, idx):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
        log_data = product.get('log', {})
        global_idx = (page - 1) * 100 + idx + 1
        
        return {
            '–ù–∞–∑–≤–∞–Ω–∏–µ': product.get('name', ''),
            'CPM': log_data.get('cpm', 0),
            '–ü–æ–∑–∏—Ü–∏—è': global_idx,
            '–ü—Ä–æ–º–æ –ø–æ–∑–∏—Ü–∏—è': log_data.get('promoPosition'),
            '–û—Ä–≥. –ø–æ–∑–∏—Ü–∏—è': log_data.get('position', idx + 1),
            '–¢–∏–ø': log_data.get('tp', '-'),
            '–ó–∞–ø—Ä–æ—Å': query,
            '–î–∞—Ç–∞': datetime.datetime.now(MOSCOW_TZ),
            '–ü—Ä–æ–º–æ': '–î–∞' if log_data.get('promoPosition') is not None else '–ù–µ—Ç',
            '–ì–æ—Ä–æ–¥': '–ö–∞–ª—É–≥–∞',
            '–ê—Ä—Ç–∏–∫—É–ª': product['id'],
            '–ë—Ä–µ–Ω–¥': product.get('brand', ''),
            '–ü–æ—Å—Ç–∞–≤—â–∏–∫': product.get('supplier', ''),
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product['entity']
        }

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=CONFIG['TOKEN'])
        self.dp = Dispatcher()
        self.parser = WBParser()
        self.setup_handlers()
        self.previous_data = None
        self.current_data = None
        self.last_check_time = None
        self.last_compare_time = None

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(Command("info"))(self.info_handler)
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        self.dp.message(F.text == 'üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏')(self.check_positions_handler)
        self.dp.message(F.text == 'üìà –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º')(self.compare_results_handler)
        self.dp.message(F.text == 'üìå –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤')(self.top_products_handler)
        self.dp.message(F.text == 'üìâ –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞')(self.product_dynamics_handler)
        self.dp.message(F.text == 'üèÜ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')(self.category_analysis_handler)
        self.dp.message(F.text == 'üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞')(self.query_analysis_handler)
        self.dp.message(F.text == 'üì¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ')(self.promo_analysis_handler)
        self.dp.message(F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')(self.info_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message(StateFilter(Form.waiting_for_article))(self.handle_article_input)
        self.dp.message(StateFilter(Form.waiting_for_category))(self.handle_category_input)
        self.dp.message(StateFilter(Form.waiting_for_query))(self.handle_query_input)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.dp.message()(self.unknown_command_handler)

    async def start_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        await self.show_main_menu(message)

    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"))
        builder.row(KeyboardButton(text="üìà –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º"))
        builder.row(KeyboardButton(text="üìå –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤"))
        builder.row(
            KeyboardButton(text="üìâ –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞"),
            KeyboardButton(text="üèÜ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        )
        builder.row(
            KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"),
            KeyboardButton(text="üì¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ")
        )
        builder.row(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Wildberries!\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

    async def info_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'"""
        await state.clear()
        await message.answer(
            "üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
            "–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.\n\n"
            "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
            "üìÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–ú–°–ö).",
            parse_mode="HTML"
        )

    async def unknown_command_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        current_state = await state.get_state()
        if current_state:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
        else:
            await message.answer("ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
            await self.show_main_menu(message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    async def product_dynamics_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞' —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
            if not os.path.exists(CONFIG['DATA_FILE']):
                await message.answer("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if analytics.df.empty:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
                return

            articles = analytics.get_available_articles()
            
            if not articles:
                await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = ReplyKeyboardBuilder()
            for article in articles[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                builder.add(KeyboardButton(text=str(article)))
            builder.adjust(4)
            builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
            
            await state.set_state(Form.waiting_for_article)
            await message.answer(
                "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å–ø–∏—Å–∫–∞:</b>\n"
                f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(articles)}\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é",
                reply_markup=builder.as_markup(resize_keyboard=True),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ product_dynamics_handler: {str(e)}", exc_info=True)
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö."
            )
            await state.clear()

    async def handle_article_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π DataFrame"""
        try:
            article = message.text.strip()
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            product_data, stats = analytics.get_product_data(article)
            if product_data is None or product_data.empty or stats is None:
                await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            position_graph = analytics.generate_position_graph(article)
            avg_position_graph = analytics.generate_avg_position_graph(article)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω
            if position_graph is None and avg_position_graph is None:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response_text = (
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É:</b> {stats['name']}\n"
                f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {stats['category']}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {stats['first_check']} - {stats['last_check']}\n\n"
                f"üìå <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {stats['avg_position']}\n"
                f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {stats['best_position']}\n"
                f"‚Ä¢ –•—É–¥—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {stats['worst_position']}\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ {stats['queries_count']} –∑–∞–ø—Ä–æ—Å–∞–º\n"
                f"‚Ä¢ –ü—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏–π: {stats['promo_percentage']}%\n\n"
                f"<i>–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏</i>"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(response_text, parse_mode="HTML")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if position_graph and avg_position_graph:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –≥—Ä–∞—Ñ–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
                media_group = [
                    types.InputMediaPhoto(media=position_graph, caption="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º"),
                    types.InputMediaPhoto(media=avg_position_graph, caption="üìä –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
                ]
                await message.answer_media_group(media_group)
            elif position_graph:
                await message.answer_photo(
                    photo=position_graph,
                    caption="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º"
                )
            elif avg_position_graph:
                await message.answer_photo(
                    photo=avg_position_graph,
                    caption="üìä –î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏–π"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_article_input: {str(e)}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        finally:
            await state.clear()
            await self.show_main_menu(message)

    async def category_analysis_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'"""
        await state.set_state(Form.waiting_for_category)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    async def handle_category_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await self.show_main_menu(message)
            return

        category = message.text.strip()
        await state.clear()

        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            available_categories = analytics.get_available_categories()
            
            if category not in available_categories:
                await message.answer(
                    f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await self.category_analysis_handler(message, state)
                return

            analysis = analytics.get_competition_analysis(category)
            
            if analysis is None:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
                await self.show_main_menu(message)
                return

            response = (
                f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {analysis['category']}\n\n"
                f"üìå <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤: {analysis['brands_count']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {analysis['products_count']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {analysis['avg_position']}\n\n"
                f"üèÜ <b>–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:</b>\n"
            )
            
            for brand in analysis['top_brands']:
                response += f"‚Ä¢ {brand['–ë—Ä–µ–Ω–¥']} - —Å—Ä.–ø–æ–∑. {brand['–ü–æ–∑–∏—Ü–∏—è']} (—Ç–æ–≤–∞—Ä–æ–≤: {brand['–ê—Ä—Ç–∏–∫—É–ª']})\n"
            
            response += "\nüõçÔ∏è <b>–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
            for product in analysis['top_products']:
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —Å—Ä.–ø–æ–∑. {product['–ü–æ–∑–∏—Ü–∏—è']}\n"
            
            await message.answer(
                response, 
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await self.show_main_menu(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_category_input: {e}")
            await message.answer(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await self.show_main_menu(message)

    async def query_analysis_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞'"""
        await state.set_state(Form.waiting_for_query)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    async def handle_query_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await self.show_main_menu(message)
            return

        query = message.text.strip()
        await state.clear()

        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            available_queries = analytics.get_available_queries()
            
            if query not in available_queries:
                await message.answer(
                    f"‚ùå –ó–∞–ø—Ä–æ—Å '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await self.query_analysis_handler(message, state)
                return

            analysis = analytics.get_query_analysis(query)
            
            if analysis is None:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å '{query}'")
                await self.show_main_menu(message)
                return

            response = (
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:</b> {analysis['query']}\n\n"
                f"üìå <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {analysis['first_check']}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {analysis['last_check']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {analysis['products_count']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {analysis['avg_position']}\n"
                f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {analysis['best_position']}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏–π: {analysis['promo_percentage']}%\n\n"
                f"üèÜ <b>–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n"
            )
            
            for product in analysis['top_products']:
                promo_info = f" (–ø—Ä–æ–º–æ: {product['–ü—Ä–æ–º–æ']} —Ä–∞–∑)" if product['–ü—Ä–æ–º–æ'] > 0 else ""
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —Å—Ä.–ø–æ–∑. {product['–ü–æ–∑–∏—Ü–∏—è']}{promo_info}\n"
            
            await message.answer(
                response, 
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await self.show_main_menu(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_query_input: {e}")
            await message.answer(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await self.show_main_menu(message)

    async def promo_analysis_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ'"""
        await state.clear()
        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            analysis = analytics.get_promo_effectiveness()
            
            if analysis is None:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏—è—Ö")
                await self.show_main_menu(message)
                return

            response = (
                "üì¢ <b>–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏–π:</b>\n\n"
                f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–º–æ: {analysis['promo_products_count']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —Å –ø—Ä–æ–º–æ: {analysis['avg_promo_position']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ –ø—Ä–æ–º–æ: {analysis['avg_non_promo_position']}\n\n"
                "üöÄ <b>–°–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ:</b>\n"
            )
            
            for product in analysis['most_effective_promo']:
                improvement = round(product['–†–∞–∑–Ω–∏—Ü–∞'], 1)
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ {improvement} –ø–æ–∑–∏—Ü–∏–π\n"
            
            response += "\n‚ö†Ô∏è <b>–ù–∞–∏–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ:</b>\n"
            for product in analysis['least_effective_promo']:
                improvement = round(product['–†–∞–∑–Ω–∏—Ü–∞'], 1)
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ {improvement} –ø–æ–∑–∏—Ü–∏–π\n"
            
            await message.answer(response, parse_mode="HTML")
            await self.show_main_menu(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–º–æ: {e}")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await self.show_main_menu(message)














    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"))
        builder.row(KeyboardButton(text="üìà –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º"))
        builder.row(KeyboardButton(text="üìå –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤"))
        builder.row(
            KeyboardButton(text="üìâ –î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞"),
            KeyboardButton(text="üèÜ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        )
        builder.row(
            KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"),
            KeyboardButton(text="üì¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ")
        )
        builder.row(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ Wildberries!\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    async def product_dynamics_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∏–Ω–∞–º–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞' —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists(CONFIG['DATA_FILE']):
                await message.answer("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
                return

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ó–∞–ø—É—â–µ–Ω product_dynamics_handler, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(CONFIG['DATA_FILE'])} –±–∞–π—Ç")
            
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            articles = analytics.get_available_articles()
            
            if not articles:
                await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ü–µ—Ä–≤—ã–µ 5 –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {articles[:5]}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = ReplyKeyboardBuilder()
            for article in articles[:50]:
                builder.add(KeyboardButton(text=str(article)))
            builder.adjust(4)
            builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
            
            await state.set_state(Form.waiting_for_article)
            await message.answer(
                "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å–ø–∏—Å–∫–∞:</b>\n"
                f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(articles)}\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é",
                reply_markup=builder.as_markup(resize_keyboard=True),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ product_dynamics_handler: {e}")
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π."
            )
            await state.clear()

    async def category_analysis_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞"""
        if not os.path.exists(CONFIG['DATA_FILE']):
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
            return

        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            categories = analytics.get_available_categories()
            
            if not categories:
                await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
                return

            builder = ReplyKeyboardBuilder()
            for category in categories[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                builder.add(KeyboardButton(text=category))
            builder.adjust(3)
            
            cancel_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
            builder.add(cancel_button)
            
            await state.set_state(Form.waiting_for_category)
            await message.answer(
                "üìÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä—É—á–Ω—É—é",
                reply_markup=builder.as_markup(resize_keyboard=True),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ category_analysis_handler: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
            await state.clear()
        
    async def show_query_analysis(self, message: types.Message, query: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            analysis = analytics.get_query_analysis(query)
            
            if analysis is None:
                await message.answer(f"‚ùå –ó–∞–ø—Ä–æ—Å '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                return

            response = (
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:</b> {analysis['query']}\n\n"
                f"üìå <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {analysis['first_check']}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {analysis['last_check']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {analysis['products_count']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {analysis['avg_position']}\n"
                f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {analysis['best_position']}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏–π: {analysis['promo_percentage']}%\n\n"
                f"üèÜ <b>–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n"
            )
            
            for product in analysis['top_products']:
                promo_info = f" (–ø—Ä–æ–º–æ: {product['–ü—Ä–æ–º–æ']} —Ä–∞–∑)" if product['–ü—Ä–æ–º–æ'] > 0 else ""
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —Å—Ä.–ø–æ–∑. {product['–ü–æ–∑–∏—Ü–∏—è']}{promo_info}\n"
            
            await message.answer(response, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    async def show_product_dynamics(self, message: types.Message, article: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ç–æ–≤–∞—Ä–∞"""
        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            product_data, stats = analytics.get_position_dynamics(article)
            
            if product_data is None:
                await message.answer(f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                return

            graph = analytics.generate_position_graph(article)
            
            response = (
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É:</b> {stats['name']}\n"
                f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {article}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {stats['category']}\n"
                f"üïí –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats['first_check']}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats['last_check']}\n\n"
                f"üìå <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {stats['avg_position']}\n"
                f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {stats['best_position']}\n"
                f"‚Ä¢ –•—É–¥—à–∞—è –ø–æ–∑–∏—Ü–∏—è: {stats['worst_position']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['queries_count']}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–º–æ-–ø–æ–∑–∏—Ü–∏–π: {stats['promo_percentage']}%\n\n"
                f"<i>–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–π:</i>"
            )
            
            await message.answer_photo(graph, caption=response, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–Ω–∞–º–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def query_analysis_handler(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞"""
        if not os.path.exists(CONFIG['DATA_FILE']):
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
            return

        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            queries = analytics.get_available_queries()
            
            if not queries:
                await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö.")
                return

            builder = ReplyKeyboardBuilder()
            for query in queries[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
                builder.add(KeyboardButton(text=query))
            builder.adjust(2)
            
            cancel_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
            builder.add(cancel_button)
            
            await state.set_state(Form.waiting_for_query)
            await message.answer(
                "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é",
                reply_markup=builder.as_markup(resize_keyboard=True),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ query_analysis_handler: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
            await state.clear()
    
    async def show_category_analysis(self, message: types.Message, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            analysis = analytics.get_competition_analysis(category)
            
            if analysis is None:
                await message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
                return

            response = (
                f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {analysis['category']}\n\n"
                f"üìå <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤: {analysis['brands_count']}\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {analysis['products_count']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {analysis['avg_position']}\n\n"
                f"üèÜ <b>–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:</b>\n"
            )
            
            for brand in analysis['top_brands']:
                response += f"‚Ä¢ {brand['–ë—Ä–µ–Ω–¥']} - —Å—Ä.–ø–æ–∑. {brand['–ü–æ–∑–∏—Ü–∏—è']} (—Ç–æ–≤–∞—Ä–æ–≤: {brand['–ê—Ä—Ç–∏–∫—É–ª']})\n"
            
            response += "\nüõçÔ∏è <b>–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
            for product in analysis['top_products']:
                response += f"‚Ä¢ {product['–ù–∞–∑–≤–∞–Ω–∏–µ']} (–∞—Ä—Ç. {product['–ê—Ä—Ç–∏–∫—É–ª']}) - —Å—Ä.–ø–æ–∑. {product['–ü–æ–∑–∏—Ü–∏—è']}\n"
            
            await message.answer(response, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    async def top_products_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤'"""
        if not os.path.exists(CONFIG['DATA_FILE']):
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
            return
        
        try:
            await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤...")
            
            df = pd.read_csv(CONFIG['DATA_FILE'])
            
            # –¢–æ–ø 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª—É—á—à–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            top_products = df.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∑–≤–∞–Ω–∏–µ']).agg({
                '–ü–æ–∑–∏—Ü–∏—è': 'mean',
                '–ó–∞–ø—Ä–æ—Å': 'count'
            }).sort_values(by='–ü–æ–∑–∏—Ü–∏—è').head(5)
            
            # –¢–æ–ø 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª—É—á—à–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            top_queries = df.groupby('–ó–∞–ø—Ä–æ—Å').agg({
                '–ü–æ–∑–∏—Ü–∏—è': 'mean',
                '–ê—Ä—Ç–∏–∫—É–ª': 'count'
            }).sort_values(by='–ü–æ–∑–∏—Ü–∏—è').head(5)
            
            response_message = (
                "üèÜ <b>–¢–æ–ø 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª—É—á—à–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏:</b>\n\n"
            )
            
            for (article, name), row in top_products.iterrows():
                response_message += (
                    f"üîπ <b>{name}</b>\n"
                    f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n"
                    f"–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {round(row['–ü–æ–∑–∏—Ü–∏—è'], 1)}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {row['–ó–∞–ø—Ä–æ—Å']}\n\n"
                )
            
            response_message += (
                "\nüîç <b>–¢–æ–ø 5 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª—É—á—à–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏:</b>\n\n"
            )
            
            for query, row in top_queries.iterrows():
                response_message += (
                    f"üîπ <i>{query}</i>\n"
                    f"–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: {round(row['–ü–æ–∑–∏—Ü–∏—è'], 1)}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {row['–ê—Ä—Ç–∏–∫—É–ª']}\n\n"
                )
            
            await message.answer(response_message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def generate_analytics(self, comparison_df):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–π"""
        total_changes = len(comparison_df)
        improved = len(comparison_df[comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] > 0])
        worsened = len(comparison_df[comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] < 0])
        unchanged = len(comparison_df[comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] == 0])
        
        avg_improvement = round(comparison_df[comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] > 0]['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'].mean(), 1) if improved > 0 else 0
        avg_worsening = round(abs(comparison_df[comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] < 0]['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'].mean()), 1) if worsened > 0 else 0
        
        promo_improved = len(comparison_df[(comparison_df['–ò–∑–º–µ–Ω–µ–Ω–∏–µ'] > 0) & (comparison_df['–ü—Ä–æ–º–æ_–ø–æ—Å–ª–µ'] == '–î–∞')])
        promo_total = len(comparison_df[comparison_df['–ü—Ä–æ–º–æ_–ø–æ—Å–ª–µ'] == '–î–∞'])
        
        analytics = (
            "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
            f"‚Ä¢ –£–ª—É—á—à–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏: {improved} ({round(improved/total_changes*100)}%)\n"
            f"‚Ä¢ –£—Ö—É–¥—à–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏: {worsened} ({round(worsened/total_changes*100)}%)\n"
            f"‚Ä¢ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {unchanged} ({round(unchanged/total_changes*100)}%)\n\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: +{avg_improvement} –ø–æ–∑–∏—Ü–∏–π\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ: -{avg_worsening} –ø–æ–∑–∏—Ü–∏–π\n\n"
        )
        
        if promo_total > 0:
            analytics += (
                f"üì¢ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ:</b>\n"
                f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–º–æ: {promo_total}\n"
                f"‚Ä¢ –ò–∑ –Ω–∏—Ö —É–ª—É—á—à–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏: {promo_improved} ({round(promo_improved/promo_total*100)}%)\n\n"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if improved / total_changes > 0.7:
            analytics += "üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!</b> –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π —É–ª—É—á—à–∏–ª–æ—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n"
        elif worsened / total_changes > 0.5:
            analytics += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø–æ–∑–∏—Ü–∏–π —É—Ö—É–¥—à–∏–ª–æ—Å—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.\n"
        
        if (promo_total > 0) and (promo_improved / promo_total < 0.3):
            analytics += "üì¢ <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã.\n"
        
        return analytics

    def format_timedelta(self, td):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        days = td.days
        hours, remainder = divmod(td.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days > 0:
            parts.append(f"{days} –¥.")
        if hours > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")
        if seconds > 0 and not parts:
            parts.append(f"{seconds} —Å–µ–∫.")
        
        return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"

    async def check_positions_handler(self, message: types.Message, state: FSMContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if os.path.exists(CONFIG['DATA_FILE']):
                self.previous_data = pd.read_csv(CONFIG['DATA_FILE'])
                self.last_check_time = datetime.datetime.now()
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = []
            queries = self.parser.load_queries()
            
            for city in CONFIG['CITIES']:
                geo_info = self.parser.get_city_params(city)
                dest_id = geo_info.get('dest', CONFIG['GEO_FALLBACK_DEST']) if geo_info else CONFIG['GEO_FALLBACK_DEST']
                
                for query in queries:
                    data.extend(self.parser.parse_products(query, dest_id))
                    time.sleep(CONFIG['REQUEST_DELAY'])
            
            if not data:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.current_data = pd.DataFrame(data)
            self.current_data.to_csv(CONFIG['DATA_FILE'], index=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            analytics = WBAnalytics(CONFIG['DATA_FILE'])
            analytics.update_avg_positions(self.current_data)
            
            await self.send_results(message, self.current_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}", exc_info=True)
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def compare_results_handler(self, message: types.Message, state: FSMContext):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if not hasattr(self, 'previous_data') or self.previous_data is None:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
                return
                
            if not hasattr(self, 'current_data') or self.current_data is None:
                await message.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∏—Ü–∏–π.")
                return

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            merged = pd.merge(
                self.previous_data, 
                self.current_data,
                on=['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ó–∞–ø—Ä–æ—Å'],
                suffixes=('_prev', '_curr'),
                how='inner'
            )

            if merged.empty:
                await message.answer("‚ùå –ù–µ—Ç –æ–±—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = ["üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π:</b>\n"]
            
            for art in merged['–ê—Ä—Ç–∏–∫—É–ª'].unique():
                art_data = merged[merged['–ê—Ä—Ç–∏–∫—É–ª'] == art]
                product_name = art_data['–ù–∞–∑–≤–∞–Ω–∏–µ'].iloc[0]
                
                response.append(f"\nüîπ <b>{product_name}</b> (–∞—Ä—Ç. {art})")
                
                for _, row in art_data.iterrows():
                    change = row['–ü–æ–∑–∏—Ü–∏—è_prev'] - row['–ü–æ–∑–∏—Ü–∏—è_curr']
                    if change > 0:
                        emoji = "üü¢"
                        change_text = f"+{change}"
                    elif change < 0:
                        emoji = "üî¥"
                        change_text = f"{change}"
                    else:
                        emoji = "‚ö™"
                        change_text = "0"
                    
                    response.append(
                        f"{emoji} <i>{row['–ó–∞–ø—Ä–æ—Å']}</i>\n"
                        f"   –ë—ã–ª–æ: {row['–ü–æ–∑–∏—Ü–∏—è_prev']} ‚Üí –°—Ç–∞–ª–æ: {row['–ü–æ–∑–∏—Ü–∏—è_curr']}\n"
                        f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_text}"
                    )

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            msg_parts = []
            current_part = ""
            
            for line in response:
                if len(current_part + line) > 4000:
                    msg_parts.append(current_part)
                    current_part = line
                else:
                    current_part += "\n" + line
                    
            if current_part:
                msg_parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for part in msg_parts:
                await message.answer(part, parse_mode="HTML")
                await asyncio.sleep(1)
                
            await message.answer("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


    async def send_results(self, message: types.Message, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        df = pd.DataFrame(data)
        grouped = df.groupby(['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∑–≤–∞–Ω–∏–µ'])
        
        messages = []
        current_message = (
            f"üïí <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n\n"
        )
        
        for (category, article, name), group in grouped:
            message_part = (
                f"üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                f"üîπ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {article}\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            )
            
            positions = []
            for _, row in group.iterrows():
                pos = f"   ‚Ä¢ <i>{row['–ó–∞–ø—Ä–æ—Å']}</i> - –ø–æ–∑–∏—Ü–∏—è {row['–ü–æ–∑–∏—Ü–∏—è']}"
                if row['–ü—Ä–æ–º–æ'] == '–î–∞':
                    pos += f" (–ø—Ä–æ–º–æ: {row['–ü—Ä–æ–º–æ –ø–æ–∑–∏—Ü–∏—è']})"
                positions.append(pos)
            
            message_part += "\n".join(positions) + "\n\n"
            
            if len(current_message + message_part) > 4000:
                messages.append(current_message)
                current_message = message_part
            else:
                current_message += message_part
        
        if current_message:
            messages.append(current_message)
        
        for i, msg in enumerate(messages):
            await message.answer(msg, parse_mode="HTML")
            if i < len(messages) - 1:
                time.sleep(1)
        
        await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)

async def main():
    bot = TelegramBot()
    await bot.run()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())